# Define iOS platform version
platform :ios, '15.0'

# Workaround for Cocoapods v1.10.0 issue
install! 'cocoapods', :deterministic_uuids => false, :integrate_targets => false

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end
  
  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\s*=\s*(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter/Generated.xcconfig, then run flutter pub get"
end

# Disable the Flutter build system for CocoaPods
install! 'cocoapods',
  :deterministic_uuids => false,
  :integrate_targets => false

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    # Add build settings to fix common issues
    target.build_configurations.each do |config|
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      
      # Fix Xcode 15+ compatibility
      config.build_settings['GENERATE_INFOPLIST_FILE'] = 'YES'
      
      # Enable modular headers for better Swift/Obj-C interoperability
      config.build_settings['DEFINES_MODULE'] = 'YES'
      
      # Enable ARC for all pods
      config.build_settings['CLANG_ENABLE_OBJC_ARC'] = 'YES'
      
      # Disable debug information in release builds
      if config.name == 'Release'
        config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf-with-dsym'
        config.build_settings['GCC_OPTIMIZATION_LEVEL'] = 's'
      end
    end
  end
  
  # Add a script phase to ensure build settings are consistent
  installer.pods_project.targets.each do |target|
    target.build_phases.each do |phase|
      if phase.respond_to?(:name) && phase.name == '[CP] Check Pods Manifest.lock'
        # Create a new shell script build phase for our ensure_build_settings.sh script
        ensure_script = installer.pods_project.new(Xcodeproj::Project::Object::PBXShellScriptBuildPhase)
        ensure_script.name = 'Ensure Build Settings'
        ensure_script.shell_script = '${SRCROOT}/ensure_build_settings.sh'
        ensure_script.shell_path = '/bin/sh'
        ensure_script.show_env_vars_in_log = '0'
        
        # Insert our script phase right after the Check Pods Manifest phase
        target.build_phases.insert(target.build_phases.index(phase) + 1, ensure_script)
        break
      end
    end
  end
end
